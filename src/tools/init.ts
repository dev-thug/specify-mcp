import { z } from 'zod';
import type { SDDTool, ToolResult } from '../types/index.js';
import { CommonVerifier } from '../verification/common.js';
import { ResourceManager } from '../resources/manager.js';

const initInputSchema = z.object({
  projectName: z.string().describe('Name of the project'),
  description: z.string().optional().describe('Initial project description'),
  domain: z.string().optional().describe('Project domain or industry'),
  goals: z.array(z.string()).optional().describe('Project goals and objectives'),
  constraints: z.array(z.string()).optional().describe('Known constraints or limitations')
});

export class InitTool implements SDDTool {
  name = 'initialize_project';
  description = 'Initialize a new project with requirements gathering and setup';
  inputSchema = initInputSchema;

  private verifier: CommonVerifier;
  private resourceManager: ResourceManager;

  constructor(resourceManager: ResourceManager) {
    this.verifier = new CommonVerifier();
    this.resourceManager = resourceManager;
  }

  async handler(params: unknown): Promise<ToolResult> {
    const input = initInputSchema.parse(params);
    const projectId = this.generateProjectId(input.projectName);

    // Create initial project structure
    const projectInfo = {
      projectId,
      projectName: input.projectName,
      description: input.description || '',
      domain: input.domain || '',
      goals: input.goals || [],
      constraints: input.constraints || [],
      createdAt: new Date().toISOString(),
      workflow: {
        currentStage: 'init',
        completedStages: [],
        nextStage: 'spec'
      }
    };

    // Create project metadata file
    const metadataContent = JSON.stringify(projectInfo, null, 2);
    await this.resourceManager.createResource(
      projectId,
      'metadata.json',
      metadataContent,
      { stage: 'init' }
    );

    // Create initial README
    const readmeContent = this.generateReadme(projectInfo);
    await this.resourceManager.createResource(
      projectId,
      'README.md',
      readmeContent,
      { stage: 'init' }
    );

    // Verify the initialization
    const verificationResult = await this.verifier.verify(readmeContent);
    
    // Create initialization report
    const initReport = this.generateInitReport(projectInfo, verificationResult.suggestions);
    await this.resourceManager.createResource(
      projectId,
      'init/report.md',
      initReport,
      { stage: 'init', verified: verificationResult.isValid }
    );

    return {
      content: [
        {
          type: 'text',
          text: `Project "${input.projectName}" initialized successfully`
        },
        {
          type: 'text',
          text: `PROJECT_ID: ${projectId}`
        },
        {
          type: 'resource',
          uri: `specify://${projectId}/metadata.json`
        },
        {
          type: 'resource',
          uri: `specify://${projectId}/README.md`
        }
      ]
    };
  }

  private generateProjectId(projectName: string): string {
    const sanitized = projectName.toLowerCase().replace(/[^a-z0-9]/g, '-').slice(0, 30);
    return sanitized;
  }

  private generateReadme(projectInfo: any): string {
    return `# ${projectInfo.projectName}

## Project Overview
${projectInfo.description || 'No description provided.'}

## Domain
${projectInfo.domain || 'Not specified'}

## Goals
${projectInfo.goals.length > 0 ? projectInfo.goals.map((g: string) => `- ${g}`).join('\n') : '- No goals specified'}

## Constraints
${projectInfo.constraints.length > 0 ? projectInfo.constraints.map((c: string) => `- ${c}`).join('\n') : '- No constraints specified'}

## Workflow Status
- Current Stage: ${projectInfo.workflow.currentStage}
- Next Stage: ${projectInfo.workflow.nextStage}

## Project Structure
\`\`\`
.specify/${projectInfo.projectId}/
├── metadata.json      # Project metadata
├── README.md         # This file
├── init/            # Initialization stage
├── spec/            # Specification documents
├── plan/            # Technical planning
├── tasks/           # Task breakdown
└── implement/       # Implementation guides
\`\`\`

---
*Generated by Specify MCP Server*
`;
  }

  private generateInitReport(projectInfo: any, suggestions: string[]): string {
    return `# Initialization Report

## Project Details
- **ID**: ${projectInfo.projectId}
- **Name**: ${projectInfo.projectName}
- **Created**: ${projectInfo.createdAt}

## Collected Information
### Description
${projectInfo.description || 'Not provided'}

### Domain
${projectInfo.domain || 'Not specified'}

### Goals
${projectInfo.goals.length > 0 ? projectInfo.goals.map((g: string) => `1. ${g}`).join('\n') : 'No goals specified'}

### Constraints
${projectInfo.constraints.length > 0 ? projectInfo.constraints.map((c: string) => `1. ${c}`).join('\n') : 'No constraints specified'}

## Verification Suggestions
${suggestions.length > 0 ? suggestions.map(s => `- ${s}`).join('\n') : 'No suggestions'}

## Next Steps
1. Review and refine project information if needed
2. Proceed to specification stage (spec)
3. Consider additional constraints or goals

## Recommendations
- Ensure all stakeholders agree on project goals
- Document any implicit assumptions
- Clarify success criteria for the project
`;
  }
}
